#!/usr/bin/env node

var VError = require('verror');
var vmService = require('../services/vm/vm');
var UserExistsError = require('../services/vm/errors/userexistserror');
var WrongPowerStateError = require('../services/vm/errors/wrongpowerstateerror');

var subcommands = {
	"add-user": addUser
	, "remove-user": removeUser
	, "power-cycle": powerCycle
	, "power-off": powerOff
	, "power-on": powerOn
};

function requireUserAndMachineArgs(yargs) {
	yargs
	.demand('u')
	.alias('u','user')
	.nargs('u', 1)
	.describe('u','User to add')
	.default('t','user')
	.alias('t','type')
	.nargs('t', 1)
	.describe('t','User type')
	.choices('t',['administrator','user'])
	.demand('m')
	.alias('m','vm')
	.nargs('m', 1)
	.describe('m','VM to add the user to (name or uuid)')
	.help('h')
	.alias('h','help')
	.argv;
};

function requireMachineArgs(yargs) {
	yargs
	.demand('m')
	.alias('m','vm')
	.nargs('m', 1)
	.describe('m','VM to act on (name or uuid)')
	.help('h')
	.alias('h','help')
	.argv;
}

var argv = require('yargs')
	.usage('Usage: $0 <command> [options]')
	.command('add-user', 'Add a user/administrator to a VM', requireUserAndMachineArgs)
	.command('remove-user', 'Add a user/administrator to a VM', requireMachineArgs)
	.command('power-cycle', 'Hard power cycle a VM', requireMachineArgs)
	.command('power-off', 'Hard power off a VM', requireMachineArgs)
	.command('power-on', 'Power on a VM', requireMachineArgs)
	.demand(1)
	.check(checkSubcommand)
	.argv;

function checkSubcommand(checkArgv) {
	if (!subcommands[checkArgv._[0]]) {
		throw new VError("Invalid subcommand: %s", checkArgv._[0]);
	}
	return true;
}

vmService.init(function(err) {
	if (err) throw err;
	var ret = subcommands[argv._[0]](function(err, xtra) {
		console.log(err || ("Operation successful"+(xtra?": "+xtra:"")));
		process.exit(err ? 1 : 0);
	});
});

function addUser(callback) {
	vmService.addOrUpdateVmAssignee(argv.m, argv.u, argv.t, function(err, info) {
		callback(err, info);
	});
}

function removeUser(callback) {
	vmService.removeVmAssignee(argv.m, argv.u, function(err) {
		var xtra;
		if (err && err instanceof UserExistsError) {
			err = null;
			xtra = "User was not present to be removed";
		} 
		callback(err, xtra);
	});
}

function powerCycle(callback) {
	vmService.forceShutdownVm(argv.m, function(err) {
		var xtra = "";
		if (err) {
			if (!(err instanceof WrongPowerStateError)) {
			    return callback(err);
			}
			xtra += "VM not running. Shutdown skipped.";
		}
		vmService.waitForPowerState(argv.m, vmService.POWER_STATE_OFF, 10000, function(err) {
			vmService.startVm(argv.m, function(err) {
				callback(err, xtra);
			});
		});
	});
}

function powerOff(callback) {
	vmService.forceShutdownVm(argv.m, function(err) {
		if (err) {
			if (err instanceof WrongPowerStateError) {
			    return callback(null, "VM not running. Shutdown skipped.");
			}
			return callback(err);
		}
		vmService.waitForPowerState(argv.m, vmService.POWER_STATE_OFF, 10000, function(err) {
			return callback(err);
		});
		
	});
}

function powerOn(callback) {
	vmService.startVm(argv.m, function(err) {
		if (err) {
			if (err instanceof WrongPowerStateError) {
				return callback(null, "VM already running. Startup skipped.");
			}
			return callback(err);
		}
		vmService.waitForPowerState(argv.m, vmService.POWER_STATE_ON, 10000, function(err) {
			return callback(err);
		});
	});
}
